// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// aHinvb_out
Rcpp::List aHinvb_out(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b, Rcpp::NumericMatrix u, Rcpp::NumericMatrix ev);
RcppExport SEXP _RAINBOWR_aHinvb_out(SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP evSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ev(evSEXP);
    rcpp_result_gen = Rcpp::wrap(aHinvb_out(a, b, u, ev));
    return rcpp_result_gen;
END_RCPP
}
// aPb_series_out
Rcpp::List aPb_series_out(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b, Rcpp::NumericMatrix u, Rcpp::NumericMatrix ev, Rcpp::NumericMatrix x);
RcppExport SEXP _RAINBOWR_aPb_series_out(SEXP aSEXP, SEXP bSEXP, SEXP uSEXP, SEXP evSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ev(evSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(aPb_series_out(a, b, u, ev, x));
    return rcpp_result_gen;
END_RCPP
}
// llik_out
double llik_out(int n, int p, double logH, double yPy, double logXtX, double logXtHinvX, bool REML);
RcppExport SEXP _RAINBOWR_llik_out(SEXP nSEXP, SEXP pSEXP, SEXP logHSEXP, SEXP yPySEXP, SEXP logXtXSEXP, SEXP logXtHinvXSEXP, SEXP REMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type logH(logHSEXP);
    Rcpp::traits::input_parameter< double >::type yPy(yPySEXP);
    Rcpp::traits::input_parameter< double >::type logXtX(logXtXSEXP);
    Rcpp::traits::input_parameter< double >::type logXtHinvX(logXtHinvXSEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    rcpp_result_gen = Rcpp::wrap(llik_out(n, p, logH, yPy, logXtX, logXtHinvX, REML));
    return rcpp_result_gen;
END_RCPP
}
// score_func_out
double score_func_out(int n, int p, double tr_HinvG, double yPy, double yPGPy, double tr_PG, bool REML);
RcppExport SEXP _RAINBOWR_score_func_out(SEXP nSEXP, SEXP pSEXP, SEXP tr_HinvGSEXP, SEXP yPySEXP, SEXP yPGPySEXP, SEXP tr_PGSEXP, SEXP REMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type tr_HinvG(tr_HinvGSEXP);
    Rcpp::traits::input_parameter< double >::type yPy(yPySEXP);
    Rcpp::traits::input_parameter< double >::type yPGPy(yPGPySEXP);
    Rcpp::traits::input_parameter< double >::type tr_PG(tr_PGSEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    rcpp_result_gen = Rcpp::wrap(score_func_out(n, p, tr_HinvG, yPy, yPGPy, tr_PG, REML));
    return rcpp_result_gen;
END_RCPP
}
// hess_func_out
double hess_func_out(int n, int p, double tr_HinvG2, double yPy, double yPGPy, double yPGPGPy, double tr_PG2, bool REML);
RcppExport SEXP _RAINBOWR_hess_func_out(SEXP nSEXP, SEXP pSEXP, SEXP tr_HinvG2SEXP, SEXP yPySEXP, SEXP yPGPySEXP, SEXP yPGPGPySEXP, SEXP tr_PG2SEXP, SEXP REMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type tr_HinvG2(tr_HinvG2SEXP);
    Rcpp::traits::input_parameter< double >::type yPy(yPySEXP);
    Rcpp::traits::input_parameter< double >::type yPGPy(yPGPySEXP);
    Rcpp::traits::input_parameter< double >::type yPGPGPy(yPGPGPySEXP);
    Rcpp::traits::input_parameter< double >::type tr_PG2(tr_PG2SEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    rcpp_result_gen = Rcpp::wrap(hess_func_out(n, p, tr_HinvG2, yPy, yPGPy, yPGPGPy, tr_PG2, REML));
    return rcpp_result_gen;
END_RCPP
}
// ml_est_out
Rcpp::List ml_est_out(double lambda, Rcpp::NumericMatrix y, Rcpp::NumericMatrix x, Rcpp::NumericMatrix u, Rcpp::NumericMatrix delta, Rcpp::NumericMatrix z, Rcpp::NumericMatrix k, double logXtX, double conv_param, int count_max, double bounds1, double bounds2, bool REML);
RcppExport SEXP _RAINBOWR_ml_est_out(SEXP lambdaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP uSEXP, SEXP deltaSEXP, SEXP zSEXP, SEXP kSEXP, SEXP logXtXSEXP, SEXP conv_paramSEXP, SEXP count_maxSEXP, SEXP bounds1SEXP, SEXP bounds2SEXP, SEXP REMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type logXtX(logXtXSEXP);
    Rcpp::traits::input_parameter< double >::type conv_param(conv_paramSEXP);
    Rcpp::traits::input_parameter< int >::type count_max(count_maxSEXP);
    Rcpp::traits::input_parameter< double >::type bounds1(bounds1SEXP);
    Rcpp::traits::input_parameter< double >::type bounds2(bounds2SEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    rcpp_result_gen = Rcpp::wrap(ml_est_out(lambda, y, x, u, delta, z, k, logXtX, conv_param, count_max, bounds1, bounds2, REML));
    return rcpp_result_gen;
END_RCPP
}
// eigen_out
Rcpp::List eigen_out(Rcpp::NumericMatrix a, bool symmetric, bool ainv);
RcppExport SEXP _RAINBOWR_eigen_out(SEXP aSEXP, SEXP symmetricSEXP, SEXP ainvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< bool >::type symmetric(symmetricSEXP);
    Rcpp::traits::input_parameter< bool >::type ainv(ainvSEXP);
    rcpp_result_gen = Rcpp::wrap(eigen_out(a, symmetric, ainv));
    return rcpp_result_gen;
END_RCPP
}
// ml_one_step
Rcpp::List ml_one_step(double lambda, Rcpp::NumericMatrix y, Rcpp::NumericMatrix x, Rcpp::NumericMatrix u, Rcpp::NumericMatrix delta, Rcpp::NumericMatrix z, Rcpp::NumericMatrix k, double logXtX, double conv_param, int count_max, double bounds1, double bounds2, bool REML, bool SE, bool return_Hinv);
RcppExport SEXP _RAINBOWR_ml_one_step(SEXP lambdaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP uSEXP, SEXP deltaSEXP, SEXP zSEXP, SEXP kSEXP, SEXP logXtXSEXP, SEXP conv_paramSEXP, SEXP count_maxSEXP, SEXP bounds1SEXP, SEXP bounds2SEXP, SEXP REMLSEXP, SEXP SESEXP, SEXP return_HinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type logXtX(logXtXSEXP);
    Rcpp::traits::input_parameter< double >::type conv_param(conv_paramSEXP);
    Rcpp::traits::input_parameter< int >::type count_max(count_maxSEXP);
    Rcpp::traits::input_parameter< double >::type bounds1(bounds1SEXP);
    Rcpp::traits::input_parameter< double >::type bounds2(bounds2SEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    Rcpp::traits::input_parameter< bool >::type SE(SESEXP);
    Rcpp::traits::input_parameter< bool >::type return_Hinv(return_HinvSEXP);
    rcpp_result_gen = Rcpp::wrap(ml_one_step(lambda, y, x, u, delta, z, k, logXtX, conv_param, count_max, bounds1, bounds2, REML, SE, return_Hinv));
    return rcpp_result_gen;
END_RCPP
}
// spectralG_cholesky
Rcpp::List spectralG_cholesky(Rcpp::NumericMatrix zbt, Rcpp::NumericMatrix x, bool return_G, bool return_SGS);
RcppExport SEXP _RAINBOWR_spectralG_cholesky(SEXP zbtSEXP, SEXP xSEXP, SEXP return_GSEXP, SEXP return_SGSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zbt(zbtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type return_G(return_GSEXP);
    Rcpp::traits::input_parameter< bool >::type return_SGS(return_SGSSEXP);
    rcpp_result_gen = Rcpp::wrap(spectralG_cholesky(zbt, x, return_G, return_SGS));
    return rcpp_result_gen;
END_RCPP
}
// spectralG_eigen
Rcpp::List spectralG_eigen(Rcpp::NumericMatrix zkzt, Rcpp::NumericMatrix x, bool return_G, bool return_SGS);
RcppExport SEXP _RAINBOWR_spectralG_eigen(SEXP zkztSEXP, SEXP xSEXP, SEXP return_GSEXP, SEXP return_SGSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type zkzt(zkztSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type return_G(return_GSEXP);
    Rcpp::traits::input_parameter< bool >::type return_SGS(return_SGSSEXP);
    rcpp_result_gen = Rcpp::wrap(spectralG_eigen(zkzt, x, return_G, return_SGS));
    return rcpp_result_gen;
END_RCPP
}
// EMM2_last_step
Rcpp::List EMM2_last_step(double lambda, Rcpp::NumericMatrix y, Rcpp::NumericMatrix x, Rcpp::NumericMatrix u, Rcpp::NumericMatrix d, Rcpp::NumericMatrix z, Rcpp::NumericMatrix k, Rcpp::NumericMatrix th, Rcpp::NumericMatrix ome_sq, Rcpp::NumericMatrix ph, double maxval, int n, int p, int df, bool SE, bool return_Hinv);
RcppExport SEXP _RAINBOWR_EMM2_last_step(SEXP lambdaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP uSEXP, SEXP dSEXP, SEXP zSEXP, SEXP kSEXP, SEXP thSEXP, SEXP ome_sqSEXP, SEXP phSEXP, SEXP maxvalSEXP, SEXP nSEXP, SEXP pSEXP, SEXP dfSEXP, SEXP SESEXP, SEXP return_HinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type d(dSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type z(zSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type th(thSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ome_sq(ome_sqSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ph(phSEXP);
    Rcpp::traits::input_parameter< double >::type maxval(maxvalSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type SE(SESEXP);
    Rcpp::traits::input_parameter< bool >::type return_Hinv(return_HinvSEXP);
    rcpp_result_gen = Rcpp::wrap(EMM2_last_step(lambda, y, x, u, d, z, k, th, ome_sq, ph, maxval, n, p, df, SE, return_Hinv));
    return rcpp_result_gen;
END_RCPP
}
// EM3_kernel
Rcpp::List EM3_kernel(Rcpp::NumericMatrix y0, Rcpp::NumericMatrix X0, Rcpp::NumericMatrix ZKZt0, Rcpp::NumericMatrix S0, Rcpp::NumericMatrix spI0, double n, double p, bool REML);
RcppExport SEXP _RAINBOWR_EM3_kernel(SEXP y0SEXP, SEXP X0SEXP, SEXP ZKZt0SEXP, SEXP S0SEXP, SEXP spI0SEXP, SEXP nSEXP, SEXP pSEXP, SEXP REMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y0(y0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X0(X0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type ZKZt0(ZKZt0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type spI0(spI0SEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< bool >::type REML(REMLSEXP);
    rcpp_result_gen = Rcpp::wrap(EM3_kernel(y0, X0, ZKZt0, S0, spI0, n, p, REML));
    return rcpp_result_gen;
END_RCPP
}
// P_calc
Rcpp::List P_calc(double lambda, Rcpp::List Ws, Rcpp::List Gammas, Rcpp::NumericMatrix u, Rcpp::NumericMatrix d, int lw, bool Pornot, bool gammas_diag);
RcppExport SEXP _RAINBOWR_P_calc(SEXP lambdaSEXP, SEXP WsSEXP, SEXP GammasSEXP, SEXP uSEXP, SEXP dSEXP, SEXP lwSEXP, SEXP PornotSEXP, SEXP gammas_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Ws(WsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gammas(GammasSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type lw(lwSEXP);
    Rcpp::traits::input_parameter< bool >::type Pornot(PornotSEXP);
    Rcpp::traits::input_parameter< bool >::type gammas_diag(gammas_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(P_calc(lambda, Ws, Gammas, u, d, lw, Pornot, gammas_diag));
    return rcpp_result_gen;
END_RCPP
}
// llik_REML
double llik_REML(double n, double p, double yPy, double lnP);
RcppExport SEXP _RAINBOWR_llik_REML(SEXP nSEXP, SEXP pSEXP, SEXP yPySEXP, SEXP lnPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type yPy(yPySEXP);
    Rcpp::traits::input_parameter< double >::type lnP(lnPSEXP);
    rcpp_result_gen = Rcpp::wrap(llik_REML(n, p, yPy, lnP));
    return rcpp_result_gen;
END_RCPP
}
// llik_ML
double llik_ML(double n, double yPy, double lnHinv);
RcppExport SEXP _RAINBOWR_llik_ML(SEXP nSEXP, SEXP yPySEXP, SEXP lnHinvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type yPy(yPySEXP);
    Rcpp::traits::input_parameter< double >::type lnHinv(lnHinvSEXP);
    rcpp_result_gen = Rcpp::wrap(llik_ML(n, yPy, lnHinv));
    return rcpp_result_gen;
END_RCPP
}
// score_l1
Rcpp::NumericVector score_l1(Rcpp::NumericMatrix y, Rcpp::NumericMatrix p0, Rcpp::List Gs, int lg);
RcppExport SEXP _RAINBOWR_score_l1(SEXP ySEXP, SEXP p0SEXP, SEXP GsSEXP, SEXP lgSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< int >::type lg(lgSEXP);
    rcpp_result_gen = Rcpp::wrap(score_l1(y, p0, Gs, lg));
    return rcpp_result_gen;
END_RCPP
}
// score_l1_linker
Rcpp::NumericVector score_l1_linker(Rcpp::NumericMatrix y, Rcpp::NumericMatrix p0, Rcpp::List Ws, Rcpp::List Gammas, int lw);
RcppExport SEXP _RAINBOWR_score_l1_linker(SEXP ySEXP, SEXP p0SEXP, SEXP WsSEXP, SEXP GammasSEXP, SEXP lwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Ws(WsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gammas(GammasSEXP);
    Rcpp::traits::input_parameter< int >::type lw(lwSEXP);
    rcpp_result_gen = Rcpp::wrap(score_l1_linker(y, p0, Ws, Gammas, lw));
    return rcpp_result_gen;
END_RCPP
}
// score_l1_linker_diag
Rcpp::NumericVector score_l1_linker_diag(Rcpp::NumericMatrix y, Rcpp::NumericMatrix p0, Rcpp::List W2s, int lw);
RcppExport SEXP _RAINBOWR_score_l1_linker_diag(SEXP ySEXP, SEXP p0SEXP, SEXP W2sSEXP, SEXP lwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type W2s(W2sSEXP);
    Rcpp::traits::input_parameter< int >::type lw(lwSEXP);
    rcpp_result_gen = Rcpp::wrap(score_l1_linker_diag(y, p0, W2s, lw));
    return rcpp_result_gen;
END_RCPP
}
// score_fisher
Rcpp::NumericMatrix score_fisher(Rcpp::NumericMatrix p0, Rcpp::List Gs_all, int nuisance_no, int lg_all);
RcppExport SEXP _RAINBOWR_score_fisher(SEXP p0SEXP, SEXP Gs_allSEXP, SEXP nuisance_noSEXP, SEXP lg_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gs_all(Gs_allSEXP);
    Rcpp::traits::input_parameter< int >::type nuisance_no(nuisance_noSEXP);
    Rcpp::traits::input_parameter< int >::type lg_all(lg_allSEXP);
    rcpp_result_gen = Rcpp::wrap(score_fisher(p0, Gs_all, nuisance_no, lg_all));
    return rcpp_result_gen;
END_RCPP
}
// score_fisher_linker
Rcpp::NumericMatrix score_fisher_linker(Rcpp::NumericMatrix p0, Rcpp::List Gs_all, Rcpp::List Gammas, int nuisance_no, int lw_all);
RcppExport SEXP _RAINBOWR_score_fisher_linker(SEXP p0SEXP, SEXP Gs_allSEXP, SEXP GammasSEXP, SEXP nuisance_noSEXP, SEXP lw_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gs_all(Gs_allSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gammas(GammasSEXP);
    Rcpp::traits::input_parameter< int >::type nuisance_no(nuisance_noSEXP);
    Rcpp::traits::input_parameter< int >::type lw_all(lw_allSEXP);
    rcpp_result_gen = Rcpp::wrap(score_fisher_linker(p0, Gs_all, Gammas, nuisance_no, lw_all));
    return rcpp_result_gen;
END_RCPP
}
// score_fisher_linker_diag
Rcpp::NumericMatrix score_fisher_linker_diag(Rcpp::NumericMatrix p0, Rcpp::List Gs_all, int nuisance_no, int lw_all);
RcppExport SEXP _RAINBOWR_score_fisher_linker_diag(SEXP p0SEXP, SEXP Gs_allSEXP, SEXP nuisance_noSEXP, SEXP lw_allSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p0(p0SEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Gs_all(Gs_allSEXP);
    Rcpp::traits::input_parameter< int >::type nuisance_no(nuisance_noSEXP);
    Rcpp::traits::input_parameter< int >::type lw_all(lw_allSEXP);
    rcpp_result_gen = Rcpp::wrap(score_fisher_linker_diag(p0, Gs_all, nuisance_no, lw_all));
    return rcpp_result_gen;
END_RCPP
}
// GWAS_F_test
double GWAS_F_test(Rcpp::NumericMatrix y, Rcpp::NumericMatrix x, Rcpp::NumericMatrix hinv, int v1, int v2, int p);
RcppExport SEXP _RAINBOWR_GWAS_F_test(SEXP ySEXP, SEXP xSEXP, SEXP hinvSEXP, SEXP v1SEXP, SEXP v2SEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type hinv(hinvSEXP);
    Rcpp::traits::input_parameter< int >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< int >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(GWAS_F_test(y, x, hinv, v1, v2, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RAINBOWR_aHinvb_out", (DL_FUNC) &_RAINBOWR_aHinvb_out, 4},
    {"_RAINBOWR_aPb_series_out", (DL_FUNC) &_RAINBOWR_aPb_series_out, 5},
    {"_RAINBOWR_llik_out", (DL_FUNC) &_RAINBOWR_llik_out, 7},
    {"_RAINBOWR_score_func_out", (DL_FUNC) &_RAINBOWR_score_func_out, 7},
    {"_RAINBOWR_hess_func_out", (DL_FUNC) &_RAINBOWR_hess_func_out, 8},
    {"_RAINBOWR_ml_est_out", (DL_FUNC) &_RAINBOWR_ml_est_out, 13},
    {"_RAINBOWR_eigen_out", (DL_FUNC) &_RAINBOWR_eigen_out, 3},
    {"_RAINBOWR_ml_one_step", (DL_FUNC) &_RAINBOWR_ml_one_step, 15},
    {"_RAINBOWR_spectralG_cholesky", (DL_FUNC) &_RAINBOWR_spectralG_cholesky, 4},
    {"_RAINBOWR_spectralG_eigen", (DL_FUNC) &_RAINBOWR_spectralG_eigen, 4},
    {"_RAINBOWR_EMM2_last_step", (DL_FUNC) &_RAINBOWR_EMM2_last_step, 16},
    {"_RAINBOWR_EM3_kernel", (DL_FUNC) &_RAINBOWR_EM3_kernel, 8},
    {"_RAINBOWR_P_calc", (DL_FUNC) &_RAINBOWR_P_calc, 8},
    {"_RAINBOWR_llik_REML", (DL_FUNC) &_RAINBOWR_llik_REML, 4},
    {"_RAINBOWR_llik_ML", (DL_FUNC) &_RAINBOWR_llik_ML, 3},
    {"_RAINBOWR_score_l1", (DL_FUNC) &_RAINBOWR_score_l1, 4},
    {"_RAINBOWR_score_l1_linker", (DL_FUNC) &_RAINBOWR_score_l1_linker, 5},
    {"_RAINBOWR_score_l1_linker_diag", (DL_FUNC) &_RAINBOWR_score_l1_linker_diag, 4},
    {"_RAINBOWR_score_fisher", (DL_FUNC) &_RAINBOWR_score_fisher, 4},
    {"_RAINBOWR_score_fisher_linker", (DL_FUNC) &_RAINBOWR_score_fisher_linker, 5},
    {"_RAINBOWR_score_fisher_linker_diag", (DL_FUNC) &_RAINBOWR_score_fisher_linker_diag, 4},
    {"_RAINBOWR_GWAS_F_test", (DL_FUNC) &_RAINBOWR_GWAS_F_test, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_RAINBOWR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
